buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-compiler:$kotlinVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlinVersion"
    id 'maven-publish'
}

group 'ru.spbstu'
version "$kotlinVersion"

repositories {
    mavenCentral()
}

task gen() {
    outputs.dir('src/commonMain/kotlin/kotlinx')
    doLast {
        def warnings =
                Class.forName("org.jetbrains.kotlin.diagnostics.Errors")
                .declaredFields
                .collect { [it.name, it.get(null)] }
                .findAll { it[1] in Class.forName("org.jetbrains.kotlin.diagnostics.DiagnosticFactory") }
                .findAll { it[1]?.severity?.toString() == 'WARNING' }
                .collect { it[0] }
                .collect { """const val $it = "$it" """ }
                .join('\n')
        mkdir 'src/commonMain/kotlin/kotlinx'

        new File("src/commonMain/kotlin/kotlinx/Warnings.kt").withPrintWriter {
            it.println("package kotlinx.warnings")
            it.println()
            it.println("object Warnings { ")
            it.println('    ' + warnings.replace('\n', '\n    '))
            it.println("}")
        }
    }
}

kotlin {
    jvm()
    js(BOTH) {
        nodejs()
        browser()
    }
    linuxX64()

    targets.all {
        compilations.all {
            compileKotlinTask.dependsOn(gen)
        }
    }

    sourceSets {
        commonMain {}
    }
}

clean {
    afterEvaluate {
        delete 'src/commonMain/kotlin/kotlinx'
    }
}

publishing {
    repositories {
        maven {
            url = "https://maven.pkg.github.com/vorpal-research/kotlin-maven"
            credentials {
                username (project.findProperty('deployUsername') ?: System.getenv('DEPLOY_USERNAME'))
                password (project.findProperty('deployPassword') ?: System.getenv('DEPLOY_PASSWORD'))
            }
        }
    }
}
